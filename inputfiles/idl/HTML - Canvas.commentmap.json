{
    "canvas-getcontext": "Returns an object that exposes an API for drawing on the canvas. contextId specifies the desired API: \"2d\", \"bitmaprenderer\", \"webgl\", or \"webgl2\". options is handled by that API.\n\nThis specification defines the \"2d\" and \"bitmaprenderer\" contexts below. The WebGL specifications define the \"webgl\" and \"webgl2\" contexts. [WEBGL]\n\nReturns null if contextId is not supported, or if the canvas has already been initialized with another context type (e.g., trying to get a \"2d\" context after getting a \"webgl\" context).",
    "canvas-todataurl": "Returns a data: URL for the image in the canvas.\n\nThe first argument, if provided, controls the type of the image to be returned (e.g. PNG or JPEG). The default is \"image/png\"; that type is also used if the given type isn't supported. The second argument applies if the type is an image format that supports variable quality (such as \"image/jpeg\"), and is a number in the range 0.0 to 1.0 inclusive indicating the desired quality level for the resulting image.\n\nWhen trying to use types other than \"image/png\", authors can check if the image was really returned in the requested format by checking to see if the returned string starts with one of the exact strings \"data:image/png,\" or \"data:image/png;\". If it does, the image is PNG, and thus the requested type was not supported. (The one exception to this is if the canvas has either no height or no width, in which case the result might simply be \"data:,\".)",
    "canvas-toblob": "Creates a Blob object representing a file containing the image in the canvas, and invokes a callback with a handle to that object.\n\nThe second argument, if provided, controls the type of the image to be returned (e.g. PNG or JPEG). The default is \"image/png\"; that type is also used if the given type isn't supported. The third argument applies if the type is an image format that supports variable quality (such as \"image/jpeg\"), and is a number in the range 0.0 to 1.0 inclusive indicating the desired quality level for the resulting image.",
    "canvas-transfercontroltooffscreen": "Returns a newly created OffscreenCanvas object that uses the canvas element as a placeholder. Once the canvas element has become a placeholder for an OffscreenCanvas object, its intrinsic size can no longer be changed, and it cannot have a rendering context. The content of the placeholder canvas is updated by calling the commit() method of the OffscreenCanvas object's rendering context.",
    "canvasrenderingcontext2d-canvas": "Returns the canvas element.",
    "context-getcontextattributes": "Returns an object whose:\n\nalpha member is true if the context has an alpha channel, or false if it was forced to be opaque.\ndesynchronized member is true if the context can be desynchronized.",
    "canvasstate-save": "Pushes the current state onto the stack.",
    "canvasstate-restore": "Pops the top state on the stack, restoring the context to that state.",
    "context-linewidth": "Returns the current line width.\n\nCan be set, to change the line width. Values that are not finite values greater than zero are ignored.",
    "context-linecap": "Returns the current line cap style.\n\nCan be set, to change the line cap style.\n\nThe possible line cap styles are \"butt\", \"round\", and \"square\". Other values are ignored.",
    "context-linejoin": "Returns the current line join style.\n\nCan be set, to change the line join style.\n\nThe possible line join styles are \"bevel\", \"round\", and \"miter\". Other values are ignored.",
    "context-miterlimit": "Returns the current miter limit ratio.\n\nCan be set, to change the miter limit ratio. Values that are not finite values greater than zero are ignored.",
    "context-setlinedash": "Sets the current line dash pattern (as used when stroking). The argument is a list of distances for which to alternately have the line on and the line off.",
    "context-getlinedash": "Returns a copy of the current line dash pattern. The array returned will always have an even number of entries (i.e. the pattern is normalized).",
    "context-linedashoffset": "Returns the phase offset (in the same units as the line dash pattern).\n\nCan be set, to change the phase offset. Values that are not finite values are ignored.",
    "canvastextdrawingstyles-font": "Returns the current font settings.\n\nCan be set, to change the font. The syntax is the same as for the CSS 'font' property; values that cannot be parsed as CSS font values are ignored.\n\nRelative keywords and lengths are computed relative to the font of the canvas element.",
    "context-textalign": "Returns the current text alignment settings.\n\nCan be set, to change the alignment. The possible values are and their meanings are given below. Other values are ignored. The default is \"start\".",
    "context-textbaseline": "Returns the current baseline alignment settings.\n\nCan be set, to change the baseline alignment. The possible values and their meanings are given below. Other values are ignored. The default is \"alphabetic\".",
    "canvastextdrawingstyles-direction": "Returns the current directionality.\n\nCan be set, to change the directionality. The possible values and their meanings are given below. Other values are ignored. The default is \"inherit\".",
    "context-moveto": "Creates a new subpath with the given point.",
    "context-closepath": "Marks the current subpath as closed, and starts a new subpath with a point the same as the start and end of the newly closed subpath.",
    "context-lineto": "Adds the given point to the current subpath, connected to the previous one by a straight line.",
    "context-quadraticcurveto": "Adds the given point to the current subpath, connected to the previous one by a quadratic Bézier curve with the given control point.",
    "context-beziercurveto": "Adds the given point to the current subpath, connected to the previous one by a cubic Bézier curve with the given control points.",
    "context-arcto": "Adds an arc with the given control points and radius to the current subpath, connected to the previous point by a straight line.\n\nThrows an \"IndexSizeError\" DOMException if the given radius is negative.",
    "canvaspath-arc": "Adds points to the subpath such that the arc described by the circumference of the circle described by the arguments, starting at the given start angle and ending at the given end angle, going in the given direction (defaulting to clockwise), is added to the path, connected to the previous point by a straight line.\n\nThrows an \"IndexSizeError\" DOMException if the given radius is negative.",
    "canvaspath-ellipse": "Adds points to the subpath such that the arc described by the circumference of the ellipse described by the arguments, starting at the given start angle and ending at the given end angle, going in the given direction (defaulting to clockwise), is added to the path, connected to the previous point by a straight line.\n\nThrows an \"IndexSizeError\" DOMException if the given radius is negative.",
    "canvaspath-rect": "Adds a new closed subpath to the path, representing the given rectangle.",
    "path2d": "Creates a new empty Path2D object.",
    "path2d-addpath": "Adds to the path the path given by the argument.",
    "canvastransform-scale": "Changes the current transformation matrix to apply a scaling transformation with the given characteristics.",
    "canvastransform-rotate": "Changes the current transformation matrix to apply a rotation transformation with the given characteristics. The angle is in radians.",
    "canvastransform-translate": "Changes the current transformation matrix to apply a translation transformation with the given characteristics.",
    "canvastransform-transform": "Changes the current transformation matrix to apply the matrix given by the arguments as described below.",
    "context-gettransform": "Returns a copy of the current transformation matrix, as a newly created DOMMatrix object.",
    "context-settransform": "Changes the current transformation matrix to the matrix given by the arguments as described below.",
    "context-resettransform": "Changes the current transformation matrix to the identity matrix.",
    "context-fillstyle": "Returns the current style used for filling shapes.\n\nCan be set, to change the fill style.\n\nThe style can be either a string containing a CSS color, or a CanvasGradient or CanvasPattern object. Invalid values are ignored.",
    "context-strokestyle": "Returns the current style used for stroking shapes.\n\nCan be set, to change the stroke style.\n\nThe style can be either a string containing a CSS color, or a CanvasGradient or CanvasPattern object. Invalid values are ignored.",
    "canvasgradient-addcolorstop": "Adds a color stop with the given color to the gradient at the given offset. 0.0 is the offset at one end of the gradient, 1.0 is the offset at the other end.\n\nThrows an \"IndexSizeError\" DOMException if the offset is out of range. Throws a \"SyntaxError\" DOMException if the color cannot be parsed.",
    "context-createlineargradient": "Returns a CanvasGradient object that represents a linear gradient that paints along the line given by the coordinates represented by the arguments.",
    "context-createradialgradient": "Returns a CanvasGradient object that represents a radial gradient that paints along the cone given by the circles represented by the arguments.\n\nIf either of the radii are negative, throws an \"IndexSizeError\" DOMException exception.",
    "context-createpattern": "Returns a CanvasPattern object that uses the given image and repeats in the direction(s) given by the repetition argument.\n\nThe allowed values for repetition are repeat (both directions), repeat-x (horizontal only), repeat-y (vertical only), and no-repeat (neither). If the repetition argument is empty, the value repeat is used.\n\nIf the image isn't yet fully decoded, then nothing is drawn. If the image is a canvas with no data, throws an \"InvalidStateError\" DOMException.",
    "canvaspattern-settransform": "Sets the transformation matrix that will be used when rendering the pattern during a fill or stroke painting operation.",
    "context-clearrect": "Clears all pixels on the bitmap in the given rectangle to transparent black.",
    "context-fillrect": "Paints the given rectangle onto the bitmap, using the current fill style.",
    "context-strokerect": "Paints the box that outlines the given rectangle onto the bitmap, using the current stroke style.",
    "context-filltext": "Fills or strokes (respectively) the given text at the given position. If a maximum width is provided, the text will be scaled to fit that width if necessary.",
    "context-stroketext": "Fills or strokes (respectively) the given text at the given position. If a maximum width is provided, the text will be scaled to fit that width if necessary.",
    "context-measuretext": "Returns a TextMetrics object with the metrics of the given text in the current font.",
    "textmetrics-width": "Returns the measurement described below.",
    "textmetrics-actualboundingboxleft": "Returns the measurement described below.",
    "textmetrics-actualboundingboxright": "Returns the measurement described below.",
    "textmetrics-fontboundingboxascent": "Returns the measurement described below.",
    "textmetrics-fontboundingboxdescent": "Returns the measurement described below.",
    "textmetrics-actualboundingboxascent": "Returns the measurement described below.",
    "textmetrics-actualboundingboxdescent": "Returns the measurement described below.",
    "textmetrics-emheightascent": "Returns the measurement described below.",
    "textmetrics-emheightdescent": "Returns the measurement described below.",
    "textmetrics-hangingbaseline": "Returns the measurement described below.",
    "textmetrics-alphabeticbaseline": "Returns the measurement described below.",
    "textmetrics-ideographicbaseline": "Returns the measurement described below.",
    "context-beginpath": "Resets the current default path.",
    "canvasdrawpath-fill": "Fills the subpaths of the current default path or the given path with the current fill style, obeying the given fill rule.",
    "canvasdrawpath-stroke": "Strokes the subpaths of the current default path or the given path with the current stroke style.",
    "canvasdrawpath-clip": "Further constrains the clipping region to the current default path or the given path, using the given fill rule to determine what points are in the path.",
    "context-ispointinpath": "Returns true if the given point is in the current default path or the given path, using the given fill rule to determine what points are in the path.",
    "context-ispointinstroke": "Returns true if the given point would be in the region covered by the stroke of the current default path or the given path, given the current stroke style.",
    "context-drawfocusifneeded": "If the given element is focused, draws a focus ring around the current default path or the given path, following the platform conventions for focus rings.",
    "context-scrollpathintoview": "Scrolls the current default path or the given path into view. This is especially useful on devices with small screens, where the whole canvas might not be visible at once.",
    "context-drawimage": "Draws the given image onto the canvas. The arguments are interpreted as follows:\n\nIf the image isn't yet fully decoded, then nothing is drawn. If the image is a canvas with no data, throws an \"InvalidStateError\" DOMException.",
    "imagedata": "Returns an ImageData object with the given dimensions. All the pixels in the returned object are transparent black.\n\nThrows an \"IndexSizeError\" DOMException if either of the width or height arguments are zero.",
    "context-createimagedata": "Returns an ImageData object with the given dimensions. All the pixels in the returned object are transparent black.\n\nThrows an \"IndexSizeError\" DOMException if either of the width or height arguments are zero.",
    "context-getimagedata": "Returns an ImageData object containing the image data for the given rectangle of the bitmap.\n\nThrows an \"IndexSizeError\" DOMException if the either of the width or height arguments are zero.",
    "imagedata-width": "Returns the actual dimensions of the data in the ImageData object, in pixels.",
    "imagedata-height": "Returns the actual dimensions of the data in the ImageData object, in pixels.",
    "imagedata-data": "Returns the one-dimensional array containing the data in RGBA order, as integers in the range 0 to 255.",
    "context-putimagedata": "Paints the data from the given ImageData object onto the bitmap. If a dirty rectangle is provided, only the pixels from that rectangle are painted.\n\nThe globalAlpha and globalCompositeOperation attributes, as well as the shadow attributes, are ignored for the purposes of this method call; pixels in the canvas are replaced wholesale, with no composition, alpha blending, no shadows, etc.\n\nThrows an \"InvalidStateError\" DOMException if the imagedata object's data attribute value's [[ViewedArrayBuffer]] internal slot is detached.",
    "context-globalalpha": "Returns the current alpha value applied to rendering operations.\n\nCan be set, to change the alpha value. Values outside of the range 0.0 .. 1.0 are ignored.",
    "context-globalcompositeoperation": "Returns the current composition operation, from the values defined in Compositing and Blending. [COMPOSITE].\n\nCan be set, to change the composition operation. Unknown values are ignored.",
    "context-imagesmoothingenabled": "Returns whether pattern fills and the drawImage() method will attempt to smooth images if their pixels don't line up exactly with the display, when scaling images up.\n\nCan be set, to change whether images are smoothed (true) or not (false).",
    "context-imagesmoothingquality": "Returns the current image-smoothing-quality preference.\n\nCan be set, to change the preferred quality of image smoothing. The possible values are \"low\", \"medium\" and \"high\". Unknown values are ignored.",
    "context-shadowcolor": "Returns the current shadow color.\n\nCan be set, to change the shadow color. Values that cannot be parsed as CSS colors are ignored.",
    "context-shadowoffsetx": "Returns the current shadow offset.\n\nCan be set, to change the shadow offset. Values that are not finite numbers are ignored.",
    "context-shadowoffsety": "Returns the current shadow offset.\n\nCan be set, to change the shadow offset. Values that are not finite numbers are ignored.",
    "context-shadowblur": "Returns the current level of blur applied to shadows.\n\nCan be set, to change the blur level. Values that are not finite numbers greater than or equal to zero are ignored.",
    "canvasfilters-filter": "Returns the current filter.\n\nCan be set, to change the filter. Values that cannot be parsed as a <filter-function-list> value are ignored.",
    "imagebitmaprenderingcontext-canvas": "Returns the canvas element that the context is bound to.",
    "imagebitmaprenderingcontext-transferfromimagebitmap": "Transfers the underlying bitmap data from imageBitmap to context, and the bitmap becomes the contents of the canvas element to which context is bound.",
    "offscreencanvas": "Returns a new OffscreenCanvas object that is not linked to a placeholder canvas element, and whose bitmap's size is determined by the width and height arguments.",
    "offscreencanvas-getcontext": "Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: \"2d\", \"bitmaprenderer\", \"webgl\", or \"webgl2\". options is handled by that API.\n\nThis specification defines the \"2d\" context below, which is similar but distinct from the \"2d\" context that is created from a canvas element. The WebGL specifications define the \"webgl\" and \"webgl2\" contexts. [WEBGL]\n\nReturns null if the canvas has already been initialized with another context type (e.g., trying to get a \"2d\" context after getting a \"webgl\" context).",
    "offscreencanvas-width": "These attributes return the dimensions of the OffscreenCanvas object's bitmap.\n\nThey can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).",
    "offscreencanvas-height": "These attributes return the dimensions of the OffscreenCanvas object's bitmap.\n\nThey can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).",
    "offscreencanvas-converttoblob": "Returns a promise that will fulfill with a new Blob object representing a file containing the image in the OffscreenCanvas object.\n\nThe argument, if provided, is a dictionary that controls the encoding options of the image file to be created. The type field specifies the file format and has a default value of \"image/png\"; that type is also used if the requested type isn't supported. If the image format supports variable quality (such as \"image/jpeg\"), then the quality field is a number in the range 0.0 to 1.0 inclusive indicating the desired quality level for the resulting image.",
    "offscreencanvas-transfertoimagebitmap": "Returns a newly created ImageBitmap object with the image in the OffscreenCanvas object. The image in the OffscreenCanvas object is replaced with a new blank image."
}
